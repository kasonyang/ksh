import org.apache.commons.exec.CommandLine;
import java.nio.charset.Charset;

class {

    private File workingDirectory = new File(".");

    Shell cd(File workingDirectory) {
        this.workingDirectory = workingDirectory;
        return this;
    }

    File cd() {
        return workingDirectory;
    }

    Shell cd(String workingDirectory) {
        return cd(new File(workingDirectory));
    }

    int exec(
            String[] arguments, String? input = "", String? output = "", String? errOutput = ""
    ){
        val p = start(arguments, input, output, errOutput);
        p.waitFor();
        return p.exitValue();
    }

    int exec(
            String command, String? input = "", String? output = "", String? errOutput = ""
    ){
        return exec(parseCommandLine(command), input, output, errOutput);
    }

    Proc start(
            String[] arguments, String? input = null, String? output = null, String? errOutput = null
    ){
        val pb = new ProcessBuilder(arguments);
        if (input != null) {
            if (input.isEmpty()) {
                pb.redirectInput(ProcessBuilder$Redirect.INHERIT);
            } else {
                pb.redirectInput(new File(input));
            }
        }
        if (output != null) {
            if (output.isEmpty()) {
                pb.redirectOutput(ProcessBuilder$Redirect.INHERIT);
            } else {
                pb.redirectOutput(this.getFileRedirectForOutput(output));
            }
        }
        if (errOutput != null) {
            if (errOutput.isEmpty()) {
                pb.redirectError(ProcessBuilder$Redirect.INHERIT);
            } else {
                pb.redirectError(this.getFileRedirectForOutput(errOutput));
            }
        }
        pb.directory(workingDirectory);
        return new Proc(pb.start());
    }

    Proc start(
            String command, String? input = null, String? output = null, String? errOutput = null
    ){
        return start(parseCommandLine(command), input, output, errOutput);
    }

    CaptureResult capture(String[] arguments, String? charset = null){
        charset = charset ?? Charset.defaultCharset().name();
        if (arguments == null || arguments.length == 0) {
            throw new IllegalArgumentException("empty array");
        }
        val p = Runtime.getRuntime().exec(arguments, null, workingDirectory);
        p.waitFor();
        try (val is = p.getInputStream(); val es = p.getErrorStream()) {
            val output = is..readToString(charset);
            val error = es..readToString(charset);
            return new CaptureResult(p.exitValue(), output, error);
        }
    }

    CaptureResult capture(String command, String? charset = null){
        return capture(parseCommandLine(command), charset);
    }

    String captureExec(String[] arguments, int expectingExitValue = 0){
        if (arguments == null || arguments.length == 0) {
            throw new IllegalArgumentException("empty array");
        }
        val command = arguments[0];
        val p = Runtime.getRuntime().exec(arguments, null, workingDirectory);
        try {
            p.waitFor();
        } catch (InterruptedException ex) {
            throw ex;
        }
        val returnValue = p.exitValue();
        if (returnValue != expectingExitValue) {
            val err = String.format("%s exit with a unexpected value %d , expected %d", command, returnValue, expectingExitValue);
            throw new IOException(err);
        }
        p.getOutputStream().close();
        val is = p.getInputStream();
        //TODO using default encoding?
        return is..readToString(Charset.defaultCharset().name());
    }

    private String[] parseCommandLine(String commandLine) {
        CommandLine cl = CommandLine.parse(commandLine);
        String[] args = cl.getArguments();
        String[] result = new String[args.length+1];
        result[0] = cl.getExecutable();
        if(args.length>0) {
            System.arraycopy(args,0,result,1, args.length);
        }
        return result;
    }

    private ProcessBuilder$Redirect getFileRedirectForOutput(String redirectFile) {
        if (redirectFile.startsWith(">>")) {
            return ProcessBuilder$Redirect.appendTo(new File(redirectFile.substring(2)));
        } else if (redirectFile.startsWith(">")) {
            return ProcessBuilder$Redirect.to(new File(redirectFile.substring(1)));
        } else {
            return ProcessBuilder$Redirect.appendTo(new File(redirectFile));
        }
    }

    static class CaptureResult {
        final int exitValue;
        final String output;
        final String error;

        constructor(int exitValue, String output, String error) {
            this.exitValue = exitValue;
            this.output = output;
            this.error = error;
        }

    }

}