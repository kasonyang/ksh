

import org.apache.commons.io.IOUtils;

import java.io.*;
import java.nio.charset.Charset;
import java.util.concurrent.TimeUnit;

/**
 *
 * @author Kason Yang
 */
class {

    private final Process process;

    constructor(Process process){
        this.process = process;
    }

    OutputStream getOutputStream() {
        return process.getOutputStream();
    }

    InputStream getInputStream() {
        return process.getInputStream();
    }

    InputStream getErrorStream() {
        return process.getErrorStream();
    }

    int waitFor(){
        return process.waitFor();
    }

    boolean waitFor(long timeout, TimeUnit unit){
        return process.waitFor(timeout, unit);
    }

    boolean waitFor(long timeout){
        return waitFor(timeout, TimeUnit.MILLISECONDS);
    }

    int exitValue() {
        return process.exitValue();
    }

    boolean exitsWith(int exitValue) {
        return process.exitValue() == exitValue;
    }

    void destroy() {
        process.destroy();
    }

    Process destroyForcibly() {
        return process.destroyForcibly();
    }

    boolean isAlive() {
        return process.isAlive();
    }

    Input input(){
        return new Input(process.getOutputStream());
    }

    Output output(){
        return new Output(process.getInputStream());
    }

    Output error(){
        return new Output(process.getErrorStream());
    }

    private String inputStreamToString(InputStream is, String charset){
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        byte[] buffer = new byte[4096];
        int rlen;
        while ((rlen = is.read(buffer)) > 0) {
            bos.write(buffer, 0, rlen);
        }
        return bos.toString(charset);
    }

    static class Input {

        private final OutputStream outputStream;

        private final Charset DEFAULT_CHARSET = Charset.defaultCharset();

        constructor(OutputStream os) {
            this.outputStream = os;
        }

        Input put(String data){
            return put(data, DEFAULT_CHARSET.name());
        }

        Input put(String data, String charset){
            outputStream.write(data.getBytes(charset));
            return this;
        }

        Input put(File file){
            IOUtils.copy(new FileInputStream(file), outputStream);
            return this;
        }

        void close(){
            this.outputStream.close();
        }

    }

    static class Output {

        private final InputStream inputStream;

        private final Charset DEFAULT_CHARSET = Charset.defaultCharset();

        constructor(InputStream inputStream) {
            this.inputStream = inputStream;
        }

        String string(String charset){
            return IOUtils.toString(inputStream, charset);
        }

        String string(){
            return IOUtils.toString(inputStream, DEFAULT_CHARSET);
        }

    }

}