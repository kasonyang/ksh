import org.apache.commons.cli.*;

import javax.annotation.Nullable;
import java.io.PrintWriter;
import java.io.StringWriter;

class {

    private CommandLine commandLine;

    private CmdLineDef cmdLineDef;

    private String[] args;

    //TODO make private
    constructor(CommandLine commandLine, CmdLineDef cmdLineDef) {
        this.commandLine = commandLine;
        this.cmdLineDef = cmdLineDef;
        this.args = commandLine.getArgs();
    }

    static CmdLine defineAndParse(String appName, String[] options, String[] args) {
        val cmdLineDef = define(appName, options);
        return cmdLineDef.parse(args);
    }

    static CmdLineDef define(String appName, String[] options) {
        val cmdLineDef = new CmdLineDef(appName, null, null);
        for (op in options) {
            processOption(cmdLineDef, op);
        }
        return cmdLineDef;
    }

    String getOptionValue(String opt,String defaultValue) {
        return commandLine.getOptionValue(opt, defaultValue);
    }

    String? getOptionValue(String opt) {
        return commandLine.getOptionValue(opt);
    }

    boolean hasOption(String opt) {
        return commandLine.hasOption(opt);
    }

    String getArgument(int index,String defaultValue) {
        return index < args.length ? args[index] : defaultValue;
    }

    String getArgument(String name,String defaultValue) {
        val index = getArgIdxByName(name);
        return index < args.length ? args[index] : defaultValue;
    }

    String getArgument(int index) {
        return args[index];
    }

    String getArgument(String name) {
        return getArgument(getArgIdxByName(name));
    }

    boolean hasArgument(int index) {
        return index < args.length;
    }

    boolean hasArgument(String name) {
        return hasArgument(getArgIdxByName(name));
    }

    String[] getArguments() {
        return commandLine.getArgs();
    }

    boolean validate() {
        val args = getArguments();
        return args.length >= cmdLineDef.requiredArgCount;
    }

    void checkHelp(int exitCodeForInvalidArg) {
        if (!validate()) {
            System.err.println(cmdLineDef.format());
            System.exit(exitCodeForInvalidArg);
        }
        val helpOptName = cmdLineDef.helpOptionName;
        if (!helpOptName.isEmpty() && hasOption(helpOptName)) {
            System.out.println(cmdLineDef.format());
            System.exit(0);
        }
    }

    private int getArgIdxByName(String name) {
        val argNames = cmdLineDef.argNames;
        val idx = argNames..asList().indexOf(name);
        if (idx < 0) {
            throw new IllegalArgumentException("unkonw argument name:${name}");
        }
        return idx;
    }

    private static void processOption(CmdLineDef cmdLineDef, String option) {
        if (option.startsWith("@")) {
            processAlias(cmdLineDef, option.substring(1));
        } else if (option.startsWith("#")) {
            val args = option.substring(1).split(" ");
            var isRequired = true;
            val argNames = new String[args.length];
            var requiredArgCount = 0;
            for (arg,idx in args) {
                isRequired = isRequired && !arg.endsWith("?");
                requiredArgCount += isRequired ? 1 : 0;
                argNames[idx] = arg.endsWith("?") ? arg.substring(0, arg.length() - 1) : arg;
            }
            cmdLineDef.argNames = argNames;
            cmdLineDef.requiredArgCount = requiredArgCount;
        } else if (option.startsWith("-")) {
            var shortArg = "";
            var longArg = "";
            if (option.charAt(1) != '-') {
                val parts = option.split(" ", 2);
                shortArg = parts[0].substring(1);
                option = parts[1];
            }
            if (option.charAt(1) == '-') {
                val parts = option.split(" ", 2);
                longArg = parts[0].substring(2);
                option = parts[1];
            }
            val hasArg = option.startsWith("$ ");
            val desc = hasArg ? option.substring(2) : option;
            cmdLineDef.add(shortArg, longArg, hasArg, desc);
        } else {
            throw new IllegalArgumentException("invalid option:${option}");
        }
    }

    private static void processAlias(CmdLineDef cmdLineDef, String alias) {
        if (alias == "help") {
            cmdLineDef.helpOptionName = "help";
            cmdLineDef.add("h", "help", false, "show this help message");
        } else {
            throw new IllegalArgumentException("unknown alias:${alias}");
        }
    }

    static class CmdLineDef {
        private Options options = new Options();

        String appName;
        String? header;
        String? footer;
        String[] argNames = new String[0];
        int requiredArgCount;
        String helpOptionName = "";

        private int width = 74;

        constructor(String appName) {
            this(appName, null, null);
        }

        constructor(String appName,String? header,String? footer) {
            this.appName = appName;
            this.header = header;
            this.footer = footer;
        }

        CmdLineDef add(String opt, String description) {
            options.addOption(opt, description);
            return this;
        }

        CmdLineDef add(String opt, boolean hasArg, String description) {
            options.addOption(opt, hasArg, description);
            return this;
        }

        CmdLineDef add(String opt, String longOpt, boolean hasArg, String description) {
            options.addOption(opt, longOpt, hasArg, description);
            return this;
        }

        CmdLine parse(String[] args){
            DefaultParser parser = new DefaultParser();
            return new CmdLine(parser.parse(options, args, true), this);
        }

        String format() {
            StringWriter stringWriter = new StringWriter();
            PrintWriter pw = new PrintWriter(stringWriter);
            HelpFormatter formatter = new HelpFormatter();
            val syntax = new StringBuilder();
            syntax.append(appName);
            if (!options.getOptions().isEmpty()) {
                syntax.append(" [options]");
            }
            for (n,i in argNames) {
                if (i >= requiredArgCount) {
                    syntax.append(" [").append(n).append("]");
                } else {
                    syntax.append(" ").append(n);
                }
            }
            formatter.printHelp(pw, width, syntax.toString(), header, options,1, 3,footer, false);
            return stringWriter.toString();
        }

    }

}
