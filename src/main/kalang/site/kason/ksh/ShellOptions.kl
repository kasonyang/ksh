import org.apache.commons.cli.*;

class {

    private CommandLine commandLine;

    private Builder builder;

    private String[] args;

    private final boolean hasError;

    final String error;

    constructor(CommandLine commandLine, Builder builder) {
        this.commandLine = commandLine;
        this.builder = builder;
        this.args = commandLine.getArgs();
        this.hasError = false;
        this.error = "";
    }

    constructor(String error) {
        this.hasError = true;
        this.error = error;
    }

    String getOption(String opt,String defaultValue) {
        return commandLine.getOptionValue(opt, defaultValue);
    }

    String getOption(String opt) {
        if (!hasOption(opt)) {
            return "";
        }
        return commandLine.getOptionValue(opt);
    }

    boolean hasOption(String opt) {
        return commandLine.hasOption(opt);
    }

    String getArg(int index,String defaultValue) {
        return index < args.length ? args[index] : defaultValue;
    }

    String getArg(int index) {
        return args[index];
    }

    boolean hasArg(int index) {
        return index < args.length;
    }

    String[] getArgs() {
        return commandLine.getArgs();
    }

    String getUsage() {
        return builder.format();
    }

    boolean hasError() {
        return hasError;
    }

    static Builder newBuilder(String appName) {
        return new Builder(appName);
    }

    static class Builder {

        private Options options = new Options();

        private String[] requiredArgs = new String[0];

        private String[] optionalArgs = new String[0];

        private String appName;

        private String? header;

        private String? footer;

        private int width = 74;

        constructor(String appName) {
            this.appName = appName;
        }

        Builder option(String opt, String description) {
            options.addOption(opt, description);
            return this;
        }

        Builder option(String opt, boolean hasArg, String description) {
            options.addOption(opt, hasArg, description);
            return this;
        }

        Builder option(String? opt, String longOpt, boolean hasArg, String description) {
            options.addOption(opt, longOpt, hasArg, description);
            return this;
        }

        Builder args(String[] requiredArgs, String[] optionalArgs = new String[0]) {
            this.requiredArgs = requiredArgs;
            this.optionalArgs = optionalArgs;
            return this;
        }

        Builder width(int width) {
            this.width = width;
            return this;
        }

        Builder header(String header) {
            this.header = header;
            return this;
        }

        Builder footer(String footer) {
            this.footer = footer;
            return this;
        }

        ShellOptions build(String[] args){
            val parser = new DefaultParser();
            try {
                val cli = parser.parse(options, args, false);
                val parsedArgs = cli.getArgs();
                if (parsedArgs.length < requiredArgs.length) {
                    return new ShellOptions("invalid args");
                }
                return new ShellOptions(cli, this);
            } catch (ParseException ex) {
                return new ShellOptions(ex.getMessage());
            }
        }

        String format() {
            val usageSyntaxBuilder = new StringBuilder();
            usageSyntaxBuilder.append(appName).append(" [options]");
            for (ra in requiredArgs) {
                usageSyntaxBuilder.append(" ${ra}");
            }
            for (oa in optionalArgs) {
                usageSyntaxBuilder.append(" [${oa}]");
            }
            val usageSyntax = usageSyntaxBuilder.toString();
            val stringWriter = new StringWriter();
            val pw = new PrintWriter(stringWriter);
            val formatter = new HelpFormatter();
            formatter.printHelp(pw, width, usageSyntax, header, options,1, 3,footer, false);
            return stringWriter.toString();
        }

    }

}
